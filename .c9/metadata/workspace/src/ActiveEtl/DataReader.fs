{"filter":false,"title":"DataReader.fs","tooltip":"/src/ActiveEtl/DataReader.fs","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":1,"column":0},"end":{"row":14,"column":0},"action":"remove","lines":["open System","open System.Data","","let rec withReader (reader:IDataReader) f =","  let rec withRecord record = f record  =","    match reader.Read() with","    | false -> ()","    | true ->","      let record = reader :> IDataRecord","      f record","      withRecord  record","  ","",""]},{"start":{"row":1,"column":0},"end":{"row":74,"column":7},"action":"insert","lines":["open System","open System.Data","","[<System.Runtime.CompilerServices.Extension>]","[<AutoOpen>]","module DataReader =","  open System","  open System.Data","  open System.Collections.Generic","","  type DataReaderColumnInfo = {","      ColumnName:string","      Ordinal:int","      DataType:Type","  }","","  type IDataReader with","    member this.GetColumnInfo() =","      let dbSchema = this.GetSchemaTable()","      dbSchema.Columns |> Seq.cast<DataColumn> ","      |> Seq.map (fun col ->","        {ColumnName=col.ColumnName; Ordinal=col.Ordinal; DataType=col.DataType}","      )","","    member this.GetColumnMapping() =","      let map =  ","        this.GetColumnInfo() |> Seq.map (fun info -> (info.ColumnName, info)) |> Map.ofSeq ","","      map :> IDictionary<string,DataReaderColumnInfo>","","    member this.GetColumnOrdinalMapping() =","      let map =  ","        this.GetColumnInfo() |> Seq.map (fun info -> (info.Ordinal, info)) |> Map.ofSeq ","","      map :> IDictionary<int,DataReaderColumnInfo>","","  type DataReaderColumnMappings(dataReader:IDataReader)=","    let byName = lazy(dataReader.GetColumnMapping())","    let byOrdinal = lazy(dataReader.GetColumnOrdinalMapping())","","    member this.LookByName name =","      match (byName.Value.TryGetValue name) with","      | false,_ -> None","      | true,col -> Some col","","    member this.LookupByOrdinal ordinal = ","      match (byOrdinal.Value.TryGetValue ordinal) with","      | false,_ -> None","      | true,col -> Some col","","    member this.Check(ordinal,onMatch,?onNoMatch) =","      match this.LookupByOrdinal ordinal with","      | None -> ","        match onNoMatch with","        | None -> ()","        | Some action -> action ordinal dataReader","      | Some col -> onMatch ordinal col dataReader","","    member this.Match(ordinal,onMatch:Action<int,DataReaderColumnInfo,IDataReader>,?onNoMatch:Action<int,IDataReader>) =","      match this.LookupByOrdinal ordinal with","      | None -> ","        match onNoMatch with","        | None -> ()","        | Some action -> action.Invoke(ordinal, dataReader)","      | Some col -> onMatch.Invoke(ordinal, col, dataReader)","","","    member this.ColumnOrdinals = byOrdinal.Value.Keys","    member this.ColumnNames = byName.Value.Keys","","    member this.IterateInOrder(onColumn) =","      this.ColumnOrdinals |> Seq.iter (fun ordinal -> ","        this.Check(ordinal, onColumn)","      )"]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":1},"end":{"row":0,"column":26},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":5,"state":"start","mode":"ace/mode/forth"}},"timestamp":1426885724344,"hash":"5e4055c80ebc95d637288465e702af775bfb057e"}